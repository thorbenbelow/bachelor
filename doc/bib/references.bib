% automatisch


@misc{noauthor_structured_nodate,
  title    = {The structured clone algorithm - {Web} {APIs} {\textbar} {MDN}},
  url      = {https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm},
  abstract = {The structured clone algorithm copies complex JavaScript objects. It is used internally when invoking structuredClone(), to transfer data between Workers via postMessage(), storing objects with IndexedDB, or copying objects for other APIs.},
  language = {en-US},
  urldate  = {2022-05-21},
  file     = {Snapshot:C\:\\Users\\below.thorben\\Zotero\\storage\\LPGHPAFL\\Structured_clone_algorithm.html:text/html}
}

@misc{noauthor_workerpostmessage_nodate,
  title    = {Worker.{postMessage}() - {Web} {APIs} {\textbar} {MDN}},
  url      = {https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage},
  abstract = {The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.},
  language = {en-US},
  urldate  = {2022-05-21},
  file     = {Snapshot:C\:\\Users\\below.thorben\\Zotero\\storage\\X6IGGVSH\\postMessage.html:text/html}
}

@misc{noauthor_objectgetownpropertydescriptor_nodate,
  title    = {Object.{getOwnPropertyDescriptor}() - {JavaScript} {\textbar} {MDN}},
  url      = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor},
  abstract = {The Object.getOwnPropertyDescriptor() method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.},
  language = {en-US},
  urldate  = {2022-05-21},
  file     = {Snapshot:C\:\\Users\\below.thorben\\Zotero\\storage\\P3DUIBT5\\getOwnPropertyDescriptor.html:text/html}
}

@misc{noauthor_html_nodate,
  title   = {{HTML} {Standard} - {Safe} passing of structured data},
  url     = {https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data},
  urldate = {2022-05-21},
  file    = {HTML Standard:C\:\\Users\\below.thorben\\Zotero\\storage\\TRUM562J\\structured-data.html:text/html}
}

@inproceedings{hayes_realm_1997,
  address    = {Atlanta, Georgia, United States},
  title      = {Realm},
  isbn       = {978-0-89791-908-1},
  shorttitle = {Realm},
  url        = {http://portal.acm.org/citation.cfm?doid=263698.263733},
  doi        = {10.1145/263698.263733},
  language   = {en},
  urldate    = {2022-05-21},
  booktitle  = {Proceedings of the 12th {ACM} {SIGPLAN} conference on {Object}-oriented programming, systems, languages, and applications  - {OOPSLA} '97},
  publisher  = {ACM Press},
  author     = {Hayes, Barry},
  year       = {1997},
  pages      = {176--183}
}

@misc{noauthor_platform_nodate,
  title   = {Platform {Objects}},
  url     = {https://webidl.spec.whatwg.org/#dfn-platform-object},
  urldate = {2022-05-21},
  file    = {Web IDL Standard:C\:\\Users\\below.thorben\\Zotero\\storage\\96XQ7C3X\\webidl.spec.whatwg.org.html:text/html}
}

@misc{thielen_what_2017,
  type    = {Forum post},
  title   = {What is the specific impact of assigning \_\_proto\_\_ in each browser?},
  url     = {https://stackoverflow.com/q/24296576},
  urldate = {2022-05-23},
  journal = {Stack Overflow},
  author  = {Thielen, David},
  month   = may,
  year    = {2017},
  file    = {Snapshot:C\:\\Users\\below.thorben\\Zotero\\storage\\AEPYCQ9B\\what-is-the-specific-impact-of-assigning-proto-in-each-browser.html:text/html}
}

@misc{noauthor_html_nodate-1,
  title   = {{HTML} {Standard}},
  url     = {https://html.spec.whatwg.org/multipage/web-messaging.html#message-channels},
  urldate = {2022-05-23}
}

@misc{noauthor_jsonstringify_nodate,
  title    = {{JSON}.stringify() - {JavaScript} {\textbar} {MDN}},
  url      = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify},
  abstract = {The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.},
  language = {en-US},
  urldate  = {2022-05-23}
}

@misc{noauthor_sending_nodate,
  title    = {Sending class instances to worker threads · {Issue} \#1558 · nodejs/help},
  url      = {https://github.com/nodejs/help/issues/1558},
  abstract = {Node.js Version: v10.11.0 OS: Mac OS X High Sierra 10.13.6 Scope (install, code, runtime, meta, other?): runtime and code Module (and version) (if relevant): worker threads I\&\#39;m trying to figure...},
  language = {en},
  urldate  = {2022-05-23},
  journal  = {GitHub}
}

@misc{peretz_objectbuffer_2022,
  title      = {{ObjectBuffer}: object-like {API}, backed by a [shared]arraybuffer},
  copyright  = {MIT},
  shorttitle = {{ObjectBuffer}},
  url        = {https://github.com/Bnaya/objectbuffer},
  abstract   = {JavaScript Object like api, backed by an arraybuffer},
  urldate    = {2022-05-23},
  author     = {Peretz, Bnaya},
  month      = may,
  year       = {2022},
  note       = {original-date: 2019-08-25T12:13:03Z},
  keywords   = {arraybuffer, javascript, sharedarraybuffer, sharedmemory}
}

@misc{noauthor_bufferbackedobject_2022,
  title     = {{BufferBackedObject}},
  copyright = {Apache-2.0},
  url       = {https://github.com/GoogleChromeLabs/buffer-backed-object},
  abstract  = {Buffer-backed objects in JavaScript.},
  urldate   = {2022-05-23},
  publisher = {GoogleChromeLabs},
  month     = may,
  year      = {2022},
  note      = {original-date: 2020-04-07T18:19:59Z}
}

@misc{noauthor_flatbuffers_nodate,
  title   = {{FlatBuffers}: {Use} in {JavaScript}},
  url     = {https://google.github.io/flatbuffers/flatbuffers_guide_use_javascript.html},
  urldate = {2022-05-23},
  file    = {FlatBuffers\: Use in JavaScript:C\:\\Users\\below.thorben\\Zotero\\storage\\E8U28F4J\\flatbuffers_guide_use_javascript.html:text/html}
}

@article{verdu_performance_2016,
  title    = {Performance {Scalability} {Analysis} of {JavaScript} {Applications} with {Web} {Workers}},
  volume   = {15},
  issn     = {1556-6064},
  doi      = {10.1109/LCA.2015.2494585},
  abstract = {Web applications are getting closer to the performance of native applications taking advantage of new standard-based technologies. The recent HTML5 standard includes, among others, the Web Workers API that allows executing JavaScript applications on multiple threads, or workers. However, the internals of the browser's JavaScript virtual machine does not expose direct relation between workers and running threads in the browser and the utilization of logical cores in the processor. As a result, developers do not know how performance actually scales on different environments and therefore what is the optimal number of workers on parallel JavaScript codes. This paper presents the first performance scalability analysis of parallel web apps with multiple workers. We focus on two case studies representative of different worker execution models. Our analyses show performance scaling on different parallel processor microarchitectures and on three major web browsers in the market. Besides, we study the impact of co-running applications on the web app performance. The results provide insights for future approaches to automatically find out the optimal number of workers that provide the best tradeoff between performance and resource usage to preserve system responsiveness and user experience, especially on environments with unexpected changes on system workload.},
  number   = {2},
  journal  = {IEEE Computer Architecture Letters},
  author   = {Verdú, Javier and Pajuelo, Alex},
  month    = jul,
  year     = {2016},
  note     = {Conference Name: IEEE Computer Architecture Letters},
  keywords = {javascript, Benchmark testing, Browsers, Computer architecture, HTML5, Java, Message systems, Microarchitecture, multithreading, Multithreading, parallelism, Scalability, web apps, web workers},
  pages    = {105--108},
  file     = {Volltext:C\:\\Users\\below.thorben\\Zotero\\storage\\M2RUZGSI\\Verdú und Pajuelo - 2016 - Performance Scalability Analysis of JavaScript App.pdf:application/pdf}
}

@book{green_web_2012,
  title      = {Web {Workers}: {Multithreaded} {Programs} in {JavaScript}},
  isbn       = {978-1-4493-2209-0},
  shorttitle = {Web {Workers}},
  abstract   = {Web apps would run much better if heavy calculations could be performed in the background, rather than compete with the user interface. With this book, you’ll learn how to use Web Workers to run computationally intensive JavaScript code in a thread parallel to the UI. Yes, multi-threaded programing is complicated, but Web Workers provide a simple API that helps you be productive without the complex algorithms.If you have an intermediate to advanced understanding of JavaScript—especially event handling and callbacks—you’re ready to tackle Web Workers with the tools in this example-driven guide.Start creating Web Workers and understand what they can and can’t doDetermine which browser versions support the APIUse dedicated Web Workers for tasks that consume a lot of CPU, such as data parsingExplore use cases for creating inline Workers, such as encapsulating a web app in one pageCreate a shared Worker to communicate multiple web app instances to the server, and other usesLearn best practices for debugging Web WorkersApply Web Workers within the server-side Node environment},
  language   = {en},
  publisher  = {"O'Reilly Media, Inc."},
  author     = {Green, Ido},
  month      = may,
  year       = {2012},
  keywords   = {Computers / Internet / Web Programming, Computers / Languages / JavaScript, Computers / Parallel Processing}
}

@misc{noauthor_javascript_2022,
  title      = {{JavaScript} {Structs}: {Fixed} {Layout} {Objects}},
  shorttitle = {{JavaScript} {Structs}},
  url        = {https://github.com/tc39/proposal-structs},
  abstract   = {JavaScript Structs: Fixed Layout Objects},
  urldate    = {2022-05-31},
  publisher  = {Ecma TC39},
  month      = may,
  year       = {2022},
  note       = {original-date: 2021-08-21T01:29:04Z}
}

@misc{schneidereit_tschneidereitproposal-typed-objects_2022,
  title     = {tschneidereit/proposal-typed-objects},
  copyright = {Apache-2.0},
  url       = {https://github.com/tschneidereit/proposal-typed-objects/blob/f3154b8508cd95c99f8d9d55848fdf0ac47a07e8/explainer.md},
  abstract  = {Proposal for adding Typed Objects to JavaScript},
  urldate   = {2022-05-31},
  author    = {Schneidereit, Till},
  month     = jan,
  year      = {2022},
  note      = {original-date: 2018-09-18T13:53:50Z}
}

@misc{noauthor_transferable_nodate,
  title      = {Transferable objects - {MDN} {Web} {Docs} {Glossary}: {Definitions} of {Web}-related terms {\textbar} {MDN}},
  shorttitle = {Transferable objects - {MDN} {Web} {Docs} {Glossary}},
  url        = {https://developer.mozilla.org/en-US/docs/Glossary/Transferable_objects},
  abstract   = {Transferable objects are objects that own resources that can be transferred from one context to another, ensuring that the resources are only available in one context at a time. Following a transfer, the original object is no longer usable; it no longer points to the transferred resource, and any attempt to read or write the object will throw an exception.},
  language   = {en-US},
  urldate    = {2022-05-31}
}

@inproceedings{mattarei_emme_2018,
  address    = {Cham},
  series     = {Lecture {Notes} in {Computer} {Science}},
  title      = {{EMME}: {A} {Formal} {Tool} for {ECMAScript} {Memory} {Model} {Evaluation}},
  isbn       = {978-3-319-89963-3},
  shorttitle = {{EMME}},
  doi        = {10.1007/978-3-319-89963-3_4},
  abstract   = {Nearly all web-based interfaces are written in JavaScript. Given its prevalence, the support for high performance JavaScript code is crucial. The ECMA Technical Committee 39 (TC39) has recently extended the ECMAScript language (i.e., JavaScript) to support shared memory accesses between different threads. The extension is given in terms of a natural language memory model specification. In this paper we describe a formal approach for validating both the memory model and its implementations in various JavaScript engines. We first introduce a formal version of the memory model and report results on checking the model for consistency and other properties. We then introduce our tool, EMME, built on top of the Alloy analyzer, which leverages the model to generate all possible valid executions of a given JavaScript program. Finally, we report results using EMME together with small test programs to analyze industrial JavaScript engines. We show that EMME can find bugs as well as missed opportunities for optimization.},
  language   = {en},
  booktitle  = {Tools and {Algorithms} for the {Construction} and {Analysis} of {Systems}},
  publisher  = {Springer International Publishing},
  author     = {Mattarei, Cristian and Barrett, Clark and Guo, Shu-yu and Nelson, Bradley and Smith, Ben},
  editor     = {Beyer, Dirk and Huisman, Marieke},
  year       = {2018},
  keywords   = {JavaScript Engine, JavaScript Program, Memory Model, Shared Memory, Valid Execution},
  pages      = {55--71},
  file       = {Full Text PDF:C\:\\Users\\below.thorben\\Zotero\\storage\\5JKN2FWF\\Mattarei et al. - 2018 - EMME A Formal Tool for ECMAScript Memory Model Ev.pdf:application/pdf}
}

@inproceedings{gopalakrishnan_reordering_2022,
  address   = {Cham},
  series    = {Lecture {Notes} in {Computer} {Science}},
  title     = {Reordering {Under} the {ECMAScript} {Memory} {Consistency} {Model}},
  isbn      = {978-3-030-95953-1},
  doi       = {10.1007/978-3-030-95953-1_14},
  abstract  = {Relaxed memory accesses are used to gain substantial improvement in the performance of concurrent programs. A relaxed memory consistency model specifically describes the semantics of such memory accesses for a particular programming language. Historically, such semantics are often ill-defined or misunderstood and have been shown to conflict with common compiler optimizations essential for the performance of programs overall. In this paper, we give a formal description of the ECMAScript relaxed memory consistency model. We then analyze the impact of this model on one of the most common compiler optimizations, viz. instruction reordering. We give a conservative proof under which such optimization is allowed for relaxed memory accesses. Finally, we discuss the advantage of our conservative approach and the gaps needed to be filled in order to incorporate our results while doing such optimizations at the program level.},
  language  = {en},
  booktitle = {Languages and {Compilers} for {Parallel} {Computing}},
  publisher = {Springer International Publishing},
  author    = {Gopalakrishnan, Akshay and Verbrugge, Clark},
  editor    = {Chapman, Barbara and Moreira, José},
  year      = {2022},
  keywords  = {ECMAScript, Optimization, Relaxed memory consistency},
  pages     = {198--214}
}

@misc{gopalakrishnan_analysis_nodate,
  title        = {Analysis of the {ECMAscript} memory model:  a program transformation perspective},
  shorttitle   = {Analysis of the {ECMAscript} memory model},
  url          = {https://escholarship.mcgill.ca/concern/theses/7p88cn613},
  language     = {http://id.loc.gov/vocabulary/iso639-2/eng},
  urldate      = {2022-06-01},
  author       = {Gopalakrishnan, Akshay},
  collaborator = {Verbrugge (Supervisor), Clark},
  note         = {Publisher: McGill University},
  keywords     = {Computer Science}
}

@inproceedings{ko_securejs_2021,
  address    = {New York, NY, USA},
  series     = {{SAC} '21},
  title      = {{SecureJS} compiler: portable memory isolation in {JavaScript}},
  isbn       = {978-1-4503-8104-8},
  shorttitle = {{SecureJS} compiler},
  url        = {https://doi.org/10.1145/3412841.3442001},
  doi        = {10.1145/3412841.3442001},
  abstract   = {The memory isolation mechanism plays an essential role to provide security enforcement in JavaScript programs. Existing secure interaction libraries such as Google Caja, SES, and VM2 rely on built-in memory isolation mechanisms provided by Node.js and browsers, yet most of the other engines such as JerryScript and Duktape, which are implementations for IoT devices, do not support such isolation mechanisms. In this paper, we report about the design and implementation of SecureJS, a portable JavaScript-to-JavaScript compiler that enforces memory isolation. As it only uses standard features, the compiled code it generates can be used by any JavaScript engine. We validated empirically the semantics preservation and memory isolation of SecureJS compiled programs by using 10,490 test programs of ECMAScript Test262 test suite. We also developed a novel experiment to evaluate memory isolation property of compiled code by instrumented JavaScript engines.},
  urldate    = {2022-06-01},
  booktitle  = {Proceedings of the 36th {Annual} {ACM} {Symposium} on {Applied} {Computing}},
  publisher  = {Association for Computing Machinery},
  author     = {Ko, Yoonseok and Rezk, Tamara and Serrano, Manuel},
  month      = mar,
  year       = {2021},
  keywords   = {compiler, JavaScript, memory isolation},
  pages      = {1265--1274},
  file       = {Volltext:C\:\\Users\\below.thorben\\Zotero\\storage\\BE8DEQBM\\Ko et al. - 2021 - SecureJS compiler portable memory isolation in Ja.pdf:application/pdf}
}

@incollection{gandhi_hiding_2019,
  address   = {Berkeley, CA},
  title     = {Hiding {Behind} {Symbols}},
  isbn      = {978-1-4842-5394-6},
  url       = {https://doi.org/10.1007/978-1-4842-5394-6_8},
  abstract  = {Property naming in JavaScript objects presents one major obstacle, especially when working with third-party libraries or frameworks, which is, property name collisions. We have surrendered to the idea that we will be constrained in how we can or cannot name our variables and properties. Warning such as “Do not use \$ prefix for the names of variables, properties and methods. This prefix is reserved for {\textless}INSERT FRAMEWORK/LIBRARY NAME HERE{\textgreater} usage” are common, and something we just take in stride.},
  language  = {en},
  urldate   = {2022-06-01},
  booktitle = {{JavaScript} {Next}: {Your} {Complete} {Guide} to the {New} {Features} {Introduced} in {JavaScript}, {Starting} from {ES6} to {ES9}},
  publisher = {Apress},
  author    = {Gandhi, Raju},
  editor    = {Gandhi, Raju},
  year      = {2019},
  doi       = {10.1007/978-1-4842-5394-6_8},
  pages     = {111--125}
}

@misc{noauthor_worker_nodate,
  title   = {Worker threads {\textbar} {Node}.js v18.4.0 {Documentation}},
  url     = {https://nodejs.org/api/worker_threads.html#portpostmessagevalue-transferlist},
  urldate = {2022-06-27},
  file    = {Worker threads | Node.js v18.4.0 Documentation:C\:\\Users\\below.thorben\\Zotero\\storage\\NQEDGL4S\\worker_threads.html:text/html}
}
